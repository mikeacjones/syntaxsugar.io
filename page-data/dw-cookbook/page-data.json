{"componentChunkName":"component---src-templates-post-view-js","path":"/dw-cookbook/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dataweave Cookbook\",\n  \"published\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Recipes:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#recursively-appending-xml-namespaces\"\n  }), \"Appending XML namespaces\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#bitwise-math\"\n  }), \"Bitwise math\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#rfc822-compliant-email-validation\"\n  }), \"Email validation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#powerset\"\n  }), \"Power sets\"))), mdx(\"p\", null, \"Everything below is mainted in my Gist: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://gist.github.com/mikeacjones\"\n  }), \"https://gist.github.com/mikeacjones\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Recursively appending XML namespaces\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-dataweave\"\n  }), \"%dw 2.0\\n\\nfun appendNamespace(data, nsSelector: (k: Key) -> Namespace | Null) =\\n  data match {\\n    case is Array -> data map appendNamespace($, nsSelector)\\n    case is Object -> data mapObject do {\\n      var ns0 = nsSelector($$)\\n      ---\\n      if (ns0 != null) ns0#\\\"$($$)\\\": appendNamespace($, nsSelector)\\n      else ($$): appendNamespace($, nsSelector)\\n    }\\n    else -> data\\n}\\n\")), mdx(\"p\", null, \"Example payload:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-JSON\"\n  }), \"{\\n  \\\"GetOrderById\\\": {\\n    \\\"OrderId\\\": 656734\\n  }\\n}\\n\")), mdx(\"p\", null, \"Simple use, mapping all keys to the same namespace.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-dataweave\"\n  }), \"%dw 2.0\\nimport dw::modules::Namespaces //import the function from /src/main/resources/dw/modules/Namespaces.dwl\\n\\nns soapenv http://schemas.xmlsoap.org/soap/envelope/\\nns tem http://tempuri.org/\\n\\noutput application/xml\\n---\\n{\\n    soapenv#Envelope: {\\n        soapenv#Header:null,\\n        soapenv#Body : payload appendNamespace tem\\n    }\\n}\\n\")), mdx(\"p\", null, \"Of course, our namespace selector is a function, so we could do something like call a system API via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lookup\"), \" to dynamically pull in a map:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-dataweave\"\n  }), \"%dw 2.0\\nimport dw::modules::Namespaces //import the function from /src/main/resources/dw/modules/Namespaces.dwl\\n\\nns soapenv http://schemas.xmlsoap.org/soap/envelope/\\n\\nvar nsMap = lookup('get-namespace-map')\\n---\\n{\\n    soapenv#Envelope: {\\n        soapenv#Header:null,\\n        soapenv#Body : payload appendNamespace do {\\n          var ns0 = nsMap[$]\\n          ---\\n          if (ns0 != null) ns0 as Namespace //coerce our JSON structure to a Namespace type\\n          else null\\n        }\\n    }\\n}\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Bitwise Math\"), mdx(\"p\", null, \"Data-weave doesn't have built in operators for bitwise math. We could implement this in java.. but lets take a look at a simple implementation in data-weave that we can then reuse as a module later.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-dataweave\"\n  }), \"%dw 2.0\\nimport dw::core::Numbers\\nimport dw::core::Strings\\n\\nfun AND(lo: Number, ro: Number) = do {\\n    var binary = getBinary(lo, ro)\\n    ---\\n    Numbers::fromBinary(binary.left map ($ as Number * binary.right[$$] as Number) reduce ($$++$))\\n}\\n\\nfun OR(lo: Number, ro: Number) = do {\\n    var binary = getBinary(lo, ro)\\n    ---\\n    Numbers::fromBinary(binary.left map (if ($ == \\\"1\\\" or binary.right[$$] == \\\"1\\\") \\\"1\\\" else \\\"0\\\") reduce ($$++$))\\n}\\n\\nfun XOR(lo: Number, ro: Number) = do {\\n    var binary = getBinary(lo, ro)\\n    ---\\n    Numbers::fromBinary(binary.left map (if ($ == binary.right[$$]) \\\"0\\\" else \\\"1\\\") reduce ($$++$))\\n}\\n\\nfun getBinary(lo: Number, ro: Number) = do {\\n    var loB = Numbers::toBinary(lo)\\n    var roB = Numbers::toBinary(ro)\\n    var size = max([sizeOf(loB), sizeOf(roB)]) default 0\\n    ---\\n    { \\n        left: Strings::leftPad(loB, size, '0') splitBy '',\\n        right: Strings::leftPad(roB, size, '0') splitBy ''\\n    }\\n}\\n\")), mdx(\"p\", null, \"A lot easier to implement than you might think! All we have to do is convert it to binary and then map. Probably not the most efficient method for doing this, but a fun thing to play with. We can then use it to do something like implement the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"powerSet\"), \" function below.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Powerset\"), mdx(\"p\", null, \"Need to get the power set? Well here you go! Making use of our previous Bitwise module along with some basic set theory we all learned at some point, we can do this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-dataweave\"\n  }), \"%dw 2.0\\n\\nimport Bitwise\\n\\nfun powerSet(set: Array) = do {\\n    var iterable = (0 to pow(2,sizeOf(set))-1) as Array\\n    ---\\n    iterable map (item) -> set filter (Bitwise::AND(item,pow(2,$$)) != 0)\\n}\\n\")), mdx(\"p\", null, \"Easy peasy!\"), mdx(\"hr\", null), mdx(\"h2\", null, \"RFC822 Compliant Email Validation\"), mdx(\"p\", null, \"If the regex is valid in java, its valid in data-weave!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-dataweave\"\n  }), \"%dw 2.0\\noutput application/json\\nvar isValidEmail = (e) -> e matches /(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:(?:(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\\\\"(?:[^\\\\\\\\\\\"\\\\r\\\\\\\\]|\\\\\\\\.|(?:(?:\\\\r\\\\n)?[ \\\\t]))*\\\\\\\"(?:(?:\\\\r\\\\n)?[ \\\\t])*)(?:\\\\.(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\\\\"(?:[^\\\\\\\\\\\"\\\\r\\\\\\\\]|\\\\\\\\.|(?:(?:\\\\r\\\\n)?[ \\\\t]))*\\\\\\\"(?:(?:\\\\r\\\\n)?[ \\\\t])*))*@(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*)(?:\\\\.(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*))*|(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\\\\"(?:[^\\\\\\\\\\\"\\\\r\\\\\\\\]|\\\\\\\\.|(?:(?:\\\\r\\\\n)?[ \\\\t]))*\\\\\\\"(?:(?:\\\\r\\\\n)?[ \\\\t])*)*\\\\<(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:@(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*)(?:\\\\.(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*))*(?:,@(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*)(?:\\\\.(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*))*)*:(?:(?:\\\\r\\\\n)?[ \\\\t])*)?(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\\\\"(?:[^\\\\\\\\\\\"\\\\r\\\\\\\\]|\\\\\\\\.|(?:(?:\\\\r\\\\n)?[ \\\\t]))*\\\\\\\"(?:(?:\\\\r\\\\n)?[ \\\\t])*)(?:\\\\.(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\\\\"(?:[^\\\\\\\\\\\"\\\\r\\\\\\\\]|\\\\\\\\.|(?:(?:\\\\r\\\\n)?[ \\\\t]))*\\\\\\\"(?:(?:\\\\r\\\\n)?[ \\\\t])*))*@(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*)(?:\\\\.(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*))*\\\\>(?:(?:\\\\r\\\\n)?[ \\\\t])*)|(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\\\\"(?:[^\\\\\\\\\\\"\\\\r\\\\\\\\]|\\\\\\\\.|(?:(?:\\\\r\\\\n)?[ \\\\t]))*\\\\\\\"(?:(?:\\\\r\\\\n)?[ \\\\t])*)*:(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:(?:(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\\\\"(?:[^\\\\\\\\\\\"\\\\r\\\\\\\\]|\\\\\\\\.|(?:(?:\\\\r\\\\n)?[ \\\\t]))*\\\\\\\"(?:(?:\\\\r\\\\n)?[ \\\\t])*)(?:\\\\.(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\\\\"(?:[^\\\\\\\\\\\"\\\\r\\\\\\\\]|\\\\\\\\.|(?:(?:\\\\r\\\\n)?[ \\\\t]))*\\\\\\\"(?:(?:\\\\r\\\\n)?[ \\\\t])*))*@(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*)(?:\\\\.(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*))*|(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\\\\"(?:[^\\\\\\\\\\\"\\\\r\\\\\\\\]|\\\\\\\\.|(?:(?:\\\\r\\\\n)?[ \\\\t]))*\\\\\\\"(?:(?:\\\\r\\\\n)?[ \\\\t])*)*\\\\<(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:@(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*)(?:\\\\.(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*))*(?:,@(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*)(?:\\\\.(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*))*)*:(?:(?:\\\\r\\\\n)?[ \\\\t])*)?(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\\\\"(?:[^\\\\\\\\\\\"\\\\r\\\\\\\\]|\\\\\\\\.|(?:(?:\\\\r\\\\n)?[ \\\\t]))*\\\\\\\"(?:(?:\\\\r\\\\n)?[ \\\\t])*)(?:\\\\.(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\\\\"(?:[^\\\\\\\\\\\"\\\\r\\\\\\\\]|\\\\\\\\.|(?:(?:\\\\r\\\\n)?[ \\\\t]))*\\\\\\\"(?:(?:\\\\r\\\\n)?[ \\\\t])*))*@(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*)(?:\\\\.(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*))*\\\\>(?:(?:\\\\r\\\\n)?[ \\\\t])*)(?:,\\\\s*(?:(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\\\\"(?:[^\\\\\\\\\\\"\\\\r\\\\\\\\]|\\\\\\\\.|(?:(?:\\\\r\\\\n)?[ \\\\t]))*\\\\\\\"(?:(?:\\\\r\\\\n)?[ \\\\t])*)(?:\\\\.(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\\\\"(?:[^\\\\\\\\\\\"\\\\r\\\\\\\\]|\\\\\\\\.|(?:(?:\\\\r\\\\n)?[ \\\\t]))*\\\\\\\"(?:(?:\\\\r\\\\n)?[ \\\\t])*))*@(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*)(?:\\\\.(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*))*|(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\\\\"(?:[^\\\\\\\\\\\"\\\\r\\\\\\\\]|\\\\\\\\.|(?:(?:\\\\r\\\\n)?[ \\\\t]))*\\\\\\\"(?:(?:\\\\r\\\\n)?[ \\\\t])*)*\\\\<(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:@(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*)(?:\\\\.(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*))*(?:,@(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*)(?:\\\\.(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*))*)*:(?:(?:\\\\r\\\\n)?[ \\\\t])*)?(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\\\\"(?:[^\\\\\\\\\\\"\\\\r\\\\\\\\]|\\\\\\\\.|(?:(?:\\\\r\\\\n)?[ \\\\t]))*\\\\\\\"(?:(?:\\\\r\\\\n)?[ \\\\t])*)(?:\\\\.(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\\\\"(?:[^\\\\\\\\\\\"\\\\r\\\\\\\\]|\\\\\\\\.|(?:(?:\\\\r\\\\n)?[ \\\\t]))*\\\\\\\"(?:(?:\\\\r\\\\n)?[ \\\\t])*))*@(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*)(?:\\\\.(?:(?:\\\\r\\\\n)?[ \\\\t])*(?:[^()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\] \\\\000-\\\\031]+(?:(?:(?:\\\\r\\\\n)?[ \\\\t])+|\\\\Z|(?=[\\\\[\\\\\\\"()<>@,;:\\\\\\\\\\\\\\\".\\\\[\\\\]]))|\\\\[([^\\\\[\\\\]\\\\r\\\\\\\\]|\\\\\\\\.)*\\\\](?:(?:\\\\r\\\\n)?[ \\\\t])*))*\\\\>(?:(?:\\\\r\\\\n)?[ \\\\t])*))*)?;\\\\s*)/\\n---\\nisValidEmail(\\\"michael.jones@mulesoft.com\\\")\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Dataweave Cookbook","date":null}}},"pageContext":{"slug":"/dw-cookbook/"}},"staticQueryHashes":["1375839498"]}